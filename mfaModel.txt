model User {
  id: Int       @id @default(autoincrement())
  username: String
  email String @unique
  uniqueNumber: String  @unique
  userType: String     // Assuming you have predefined values like 'Student', 'Teacher', 'Admin'
  exams: Exam[]        @relation("UserExams", references: [id])
  createdAt: DateTime  @default(now())
  updatedAt: DateTime  @updatedAt
}

model Exam {
  id: Int       @id @default(autoincrement())
  title: String
  author: User   @relation(fields: [authorId], references: [id])
  authorId: Int
  createdAt: DateTime  @default(now())
  updatedAt: DateTime  @updatedAt
  category: String
}

model Cluster {
  id: Int       @id @default(autoincrement())
  title: String
  author: User   @relation(fields: [authorId], references: [id])
  authorId: Int
  createdAt: DateTime  @default(now())
  updatedAt: DateTime  @updatedAt
  visibility: String   // Assuming you have predefined values like 'hidden' or 'visible'
  form1: Exam[]        @relation("ClusterForm1", references: [id])
  form2: Exam[]        @relation("ClusterForm2", references: [id])
  form3: Exam[]        @relation("ClusterForm3", references: [id])
  form4: Exam[]        @relation("ClusterForm4", references: [id])

  // Trigger to automatically assign exams to the appropriate form based on the category
  @@before(create)
  {
    if (exam.category == "form1") {
      this.form1.push(exam);
    } else if (exam.category == "form2") {
      this.form2.push(exam);
    } else if (exam.category == "form3") {
      this.form3.push(exam);
    } else if (exam.category == "form4") {
      this.form4.push(exam);
    }
  }
}
